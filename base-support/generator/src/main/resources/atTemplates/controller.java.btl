package ${controllerPackage};

import cn.atsoft.dasheng.base.pojo.page.PageInfo;
import ${package.Entity}.${entity};
import ${package.EntitySpecParams}.${entity}Param;
import ${package.EntitySpecResult}.${entity}Result;
import ${package.Service}.${table.serviceName};
import cn.atsoft.dasheng.core.base.controller.BaseController;
import cn.atsoft.dasheng.core.util.ToolUtil;
import cn.atsoft.dasheng.model.response.ResponseData;
import cn.hutool.core.convert.Convert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
<%
if(titleField!=""){
%>
import ${wrapperPackage};
<%
if(parentField!=""){
%>
import cn.atsoft.dasheng.base.pojo.node.TreeNode;
import cn.atsoft.dasheng.core.treebuild.DefaultTreeBuildFactory;
<%
}
}
%>
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

<% var lowerEntityService = lowerEntity + 'Service'; %>

/**
 * ${tool.cleanWhite(table.comment)}控制器
 *
 * @author ${author}
 * @Date ${tool.currentTime()}
 */
@RestController
@RequestMapping("/${lowerEntity}")
@Api(tags = "${tool.cleanWhite(table.comment)}")
public class ${entity}Controller extends BaseController {

    @Autowired
    private ${entity}Service ${lowerEntityService};

    /**
     * 新增接口
     *
     * @author ${author}
     * @Date ${date}
     */
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    @ApiOperation("新增")
    public ResponseData addItem(@RequestBody ${entity}Param ${lowerEntity}Param) {
        <%
        if(titleField!=""){
        if(parentField!=""){
        %>
        List<String>  pidValue = ${lowerEntity}Param.getPidValue();
        <%
        if(parentType=="LONG"){
        %>
        ${lowerEntity}Param.set${bigParentField}(Long.valueOf(pidValue.get(pidValue.size()-1)));
        <%
        }else{
        %>
        ${lowerEntity}Param.set${bigParentField}(pidValue.get(pidValue.size()-1));
        <%
        }
        }
        }
        %>
        this.${lowerEntity}Service.add(${lowerEntity}Param);
        return ResponseData.success();
    }

    /**
     * 编辑接口
     *
     * @author ${author}
     * @Date ${date}
     */
    @RequestMapping(value = "/edit", method = RequestMethod.POST)
    @ApiOperation("编辑")
    public ResponseData update(@RequestBody ${entity}Param ${lowerEntity}Param) {

        <%
        if(titleField!=""){
        if(parentField!=""){
        %>
        List<String>  pidValue = ${lowerEntity}Param.getPidValue();
        <%
        if(parentType=="LONG"){
        %>
        ${lowerEntity}Param.set${bigParentField}(Long.valueOf(pidValue.get(pidValue.size()-1)));
        <%
        }else{
        %>
        ${lowerEntity}Param.set${bigParentField}(pidValue.get(pidValue.size()-1));
        <%
        }
        }
        }
        %>
        this.${lowerEntity}Service.update(${lowerEntity}Param);
        return ResponseData.success();
    }

    /**
     * 删除接口
     *
     * @author ${author}
     * @Date ${date}
     */
    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    @ApiOperation("删除")
    public ResponseData delete(@RequestBody ${entity}Param ${lowerEntity}Param)  {
        this.${lowerEntity}Service.delete(${lowerEntity}Param);
        return ResponseData.success();
    }

    /**
     * 查看详情接口
     *
     * @author ${author}
     * @Date ${date}
     */
    @RequestMapping(value = "/detail", method = RequestMethod.POST)
    @ApiOperation("详情")
    public ResponseData<${entity}Result> detail(@RequestBody ${entity}Param ${lowerEntity}Param) {
        ${entity} detail = this.${lowerEntity}Service.getById(${lowerEntity}Param.get${bigKeyPropertyName}());
        ${entity}Result result = new ${entity}Result();
        if (ToolUtil.isNotEmpty(detail)) {
            ToolUtil.copyProperties(detail, result);
        }

        <%
        if(titleField!=""){
            if(parentField!=""){
            %>
        List<Map<String,Object>> list = this.${lowerEntity}Service.listMaps();
        List<String> parentValue = ${entity}SelectWrapper.fetchParentKey(list, Convert.toStr(detail.get${bigParentField}()));
            <%
            }
        }%>
        result.set${bigParentField}Value(parentValue);
        return ResponseData.success(result);
    }

    /**
     * 查询列表
     *
     * @author ${author}
     * @Date ${date}
     */
    @RequestMapping(value = "/list", method = RequestMethod.POST)
    @ApiOperation("列表")
    public PageInfo<${entity}Result> list(@RequestBody(required = false) ${entity}Param ${lowerEntity}Param) {
        if(ToolUtil.isEmpty(${lowerEntity}Param)){
            ${lowerEntity}Param = new ${entity}Param();
        }
        <%
        if(titleField!=""){
        if(parentField!=""){
        %>
        if(ToolUtil.isNotEmpty(${lowerEntity}Param.getPidValue())){
            List<String>  pidValue = ${lowerEntity}Param.getPidValue();
            <%
            if(parentType=="LONG"){
            %>
            ${lowerEntity}Param.set${bigParentField}(Long.valueOf(pidValue.get(pidValue.size()-1)));
            <%
            }else{
            %>
            ${lowerEntity}Param.set${bigParentField}(pidValue.get(pidValue.size()-1));
            <%
            }
            %>
        }
        <%
        }
        }
        %>
        return this.${lowerEntity}Service.findPageBySpec(${lowerEntity}Param);
    }

    <%
    if(titleField!=""){
    %>
    /**
    * 选择列表
    *
    * @author ${author}
    * @Date ${date}
    */
    @RequestMapping(value = "/listSelect", method = RequestMethod.POST)
    @ApiOperation("Select数据接口")
    public ResponseData<List<Map<String,Object>>> listSelect() {
        List<Map<String,Object>> list = this.${lowerEntity}Service.listMaps();

        ${entity}SelectWrapper factory = new ${entity}SelectWrapper(list);
        List<Map<String,Object>> result = factory.wrap();
        return ResponseData.success(result);
    }
    <%
        if(parentField!=""){
    %>
    /**
     * tree列表，treeview格式
     *
     * @author ${author}
         * @Date ${date}
     */
    @RequestMapping(value = "/treeView", method = RequestMethod.POST)
    @ApiOperation("Tree数据接口")
    public ResponseData treeView() {
        List<Map<String,Object>> list = this.${lowerEntity}Service.listMaps();

        if(ToolUtil.isEmpty(list)){
            return ResponseData.success();
        }
        List<TreeNode>  treeViewNodes = new ArrayList<>();

        TreeNode rootTreeNode = new TreeNode();
        rootTreeNode.setKey("0");
        rootTreeNode.setValue("0");
        rootTreeNode.setLabel("顶级");
        rootTreeNode.setTitle("顶级");
        rootTreeNode.setParentId("-1");
        treeViewNodes.add(rootTreeNode);

        for(Map<String, Object> item:list){
            TreeNode treeNode = new TreeNode();
            treeNode.setParentId(Convert.toStr(item.get("${parentField}")));
            treeNode.setKey(Convert.toStr(item.get("${keyField}")));
            treeNode.setValue(Convert.toStr(item.get("${keyField}")));
            treeNode.setTitle(Convert.toStr(item.get("${titleField}")));
            treeNode.setLabel(Convert.toStr(item.get("${titleField}")));
            treeViewNodes.add(treeNode);
        }
        //构建树
        DefaultTreeBuildFactory<TreeNode> factory = new DefaultTreeBuildFactory<>();
        factory.setRootParentId("-1");
        List<TreeNode> results = factory.doTreeBuild(treeViewNodes);

        //把子节点为空的设为null
        //DeptTreeWrapper.clearNull(results);

        return ResponseData.success(results);
    }
    <%
        }
    }
    %>



}


